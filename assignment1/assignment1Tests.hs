import Assignment1
import Control.Exception (assert)

main :: IO ()
main = do
    print (assert (choose 10 0 == 1) "Passed")
    print (assert (choose 10 1 == 10) "Passed")
    print (assert (choose 10 3 == 120) "Passed")
    print (assert (choose 10 5 == 252) "Passed")
    print (assert (choose 10 7 == 120) "Passed")
    print (assert (choose 10 10 == 1) "Passed")

    print (assert (primeSum (-100) == 0) "Passed")
    print (assert (primeSum 0 == 0) "Passed")
    print (assert (primeSum 1 == 0) "Passed")
    print (assert (primeSum 2 == 2) "Passed")
    print (assert (primeSum 3 == 5) "Passed")
    print (assert (primeSum 7 == 17) "Passed")
    print (assert (primeSum 100 == 1060) "Passed")
    print (assert (primeSum 1000 == 76127) "Passed")
    print (assert (primeSum 10000 == 5736396) "Passed")

    print (assert (leftRotate 2 == 2) "Passed")
    print (assert (leftRotate 200 == 2) "Passed")
    print (assert (leftRotate 203 == 32) "Passed")
    print (assert (leftRotate 5241093 == 2410935) "Passed")
    print (assert (leftRotate 0 == 0) "Passed")
    print (assert (leftRotate 55559090900 == 55590909005) "Passed")

    print (assert (cLength 1 == Just 0) "Passed")
    print (assert (cLength 2 == Just 1) "Passed")    
    print (assert (cLength 128 == Just 7) "Passed")
    print (assert (cLength (2^8) == Just 8) "Passed")
    print (assert (cLength 85 == Just 9) "Passed")
    print (assert (cLength 100 == Just 25) "Passed")
    print (assert (cLength 1000 == Just 111) "Passed")
    print (assert (cLength 9999 == Just 91) "Passed")
    print (assert (cLength 10000 == Just 29) "Passed")
    print (assert (cLength (2^9999) == Just 9999) "Passed")
    print (assert (cLength (2^10000) == Nothing) "Passed")
    print (assert (cLength (2^6969) == Just 6969) "Passed")


    print (assert (frac (1,0,-1,0,0) == Nothing) "Passed")
    print (assert (frac (-1,100, 11,2,3) == Nothing) "Passed")
    print (assert (frac (0,1,0,0,0) == Nothing) "Passed")
    print (assert (frac (1,-2,1,1,1) == Nothing) "Passed")
    print (assert (frac (1,0,0,0,0) == Just (0,0,0)) "Passed")
    print (assert (frac (1,100,0,0,0) == Just (0,0,0)) "Passed")
    print (assert (frac (-1,0,0,0,0) == Just (0,0,0)) "Passed")
    print (assert (frac (1,0,1,4,5) == Just (1,4,5)) "Passed")
    print (assert (frac (1,100,1,4,5) == Just (1,4,5)) "Passed")
    print (assert (frac (-1,100,1,4,5) == Just (8,5,5)) "Passed")
    print (assert (frac (-1,2,2,0,0) == Just (8,0,0)) "Passed")
    print (assert (frac (-1,0,2,0,0) == Just (8,0,0)) "Passed")

    print (assert (ilog 1 2 == 0) "Passed")
    print (assert (ilog 2 2 == 1) "Passed")
    print (assert (ilog 128 2 == 7) "Passed")
    print (assert (ilog 200 2 == 7) "Passed")
    print (assert (ilog 200 3 == 4) "Passed")
    print (assert (ilog 256 2 == 8) "Passed")
    print (assert (ilog 256 3 == 5) "Passed")
    print (assert (ilog 256 4 == 4) "Passed")

    let delta = 1.0e-15
    print (assert (abs (cos1 1 0 - 1.0) <= delta ) "Passed")
    print (assert (abs (cos1 10 0 - 1.0) <= delta ) "Passed")
    print (assert (abs (cos1 100 (pi/4) - 0.7071067811865475) <= delta ) "Passed")
    print (assert (abs (cos1 1000 (pi/2) - 4.264460e-17) <= delta ) "Passed")
    print (assert (abs (cos1 1000 pi - (-1.0)) <= delta ) "Passed")

    print (assert (abs (cos2 1.0e-15 0 - 1.0) <= delta ) "Passed")
    print (assert (abs (cos2 1.0e-15 pi - (-1.0)) <= delta ) "Passed")
    print (assert (abs (cos2 1.0e-15 (pi/2) - 6.09227631828637e-17) <= delta ) "Passed")
    print (assert (abs (cos2 1.0e-15 (3*pi/4) - (-0.7071067811865475)) <= delta ) "Passed")
    print (assert (abs (cos2 1.0e-15 2 - (-0.41614683654714256)) <= delta ) "Passed")